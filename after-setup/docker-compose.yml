volumes:
 elasticsearch-volume:
 kibana-volume:
 logstash-volume:

networks:
 default:
   name: monitoring-network
   driver: bridge

services:
 es01:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   restart: always
   container_name: elasticsearch
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - ./elasticsearch-volume/data:/usr/share/elasticsearch/data
     - ./elasticsearch-volume/config:/usr/share/elasticsearch/config
   ports:
     - 9200:9200
   environment:
     - node.name=es01
     - cluster.name=${CLUSTER_NAME}
     - cluster.initial_master_nodes=es01
     - discovery.seed_hosts=e01
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=true
     - xpack.security.http.ssl.key=certs/es01/es01.key
     - xpack.security.http.ssl.certificate=certs/es01/es01.crt
     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.enabled=true
     - xpack.security.transport.ssl.key=certs/es01/es01.key
     - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.verification_mode=certificate
     - xpack.license.self_generated.type=${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

 kibana:
   depends_on:
     es01:
       condition: service_healthy
   image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
   restart: always
   container_name: kibana
   labels:
     co.elastic.logs/module: kibana
   volumes:
     - ./kibana-volume/data:/usr/share/kibana/data
     - ./kibana-volume/config:/usr/share/kibana/config
   ports:
     - ${KIBANA_PORT}:5601
   environment:
     - SERVERNAME=kibana
     - ELASTICSEARCH_HOSTS=https://es01:9200
     - ELASTICSEARCH_USERNAME=kibana_system
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
   mem_limit: ${KB_MEM_LIMIT}
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

 logstash:
   depends_on:
     es01:
       condition: service_healthy
     kibana:
       condition: service_healthy
   image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
   restart: always
   container_name: logstash
   labels:
     co.elastic.logs/module: logstash
   user: root
   volumes:
     - ./logstash-volume/data:/usr/share/logstash/data
     - ./logstash-volume/config:/usr/share/logstash/config
     - ./logstash-volume/certs:/usr/share/logstash/certs
     - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
   environment:
     - NODE_NAME="logstash"
     - xpack.monitoring.enabled=false
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es01:9200
   command: logstash -f /usr/share/logstash/pipeline/logstash.conf
   ports:
     - "5044:5044"
   mem_limit: ${LS_MEM_LIMIT}
